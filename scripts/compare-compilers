#!/bin/bash

COMPILERS=(
	gcc
	clang
	icc
)

ARGS=( $@ )
if [[ ${#ARGS[@]} -eq 0 ]]; then
	ARGS=(--bodies 32 --cycle-after 3 --iterations 1)
fi

for COMPILER in ${COMPILERS[@]}; do
	NBODY=nbody.${COMPILER##*/}

	if [[ -f ${NBODY} ]]; then
		continue
	fi

	echo
	echo "Building with ${COMPILER}..."

	EXTRA_MAKE_ARGS=()
	if [[ $COMPILER == "clang" ]]; then
		EXTRA_MAKE_ARGS+=( NVCC=clang++ )
	fi

	make --no-print-directory CC=${COMPILER} ${EXTRA_MAKE_ARGS[@]} CUDA=1
	make --no-print-directory CC=${COMPILER} ${EXTRA_MAKE_ARGS[@]} CUDA=1 info-flags info-compiler 2>&1 > ${NBODY}.buildinfo
	mv nbody ${NBODY}
	BUILT_SOMETHING=1
done

if [[ $BUILT_SOMETHING ]]; then
	echo
	echo "============================================"
fi
echo

make --no-print-directory info-cpu info-gpu info-os

for COMPILER in ${COMPILERS[@]}; do
	NBODY=nbody.${COMPILER##*/}

	if [[ ! -f ${NBODY} ]]; then
		continue
	fi

	echo
	echo "============================================"
	echo
	cat ${NBODY}.buildinfo
	echo "Binary size: $(wc -c ${NBODY} | awk '{ print $ 1 }') bytes"
	echo

	if [[ -z "$KMP_AFFINITY" ]]; then
		# If you have the LLVM OpenMP Runtime linked in, this will help with
		# thread placement and scheduling.
		export KMP_AFFINITY=scatter
	fi

	# Do a quick warm-up to wake up the CPUs.
	./${NBODY} --bodies 32 --iterations 2 &>/dev/null

	# Now run with the requested arguments.
	env KMP_AFFINITY=scatter,granularity=fine ./${NBODY} ${ARGS[@]}

	echo
done

exit 0
